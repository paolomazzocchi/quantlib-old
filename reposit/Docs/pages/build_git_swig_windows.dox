
/*
 Copyright (C) 2014 Eric Ehlers

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software developed by the QuantLib Group; you can
 redistribute it and/or modify it under the terms of the QuantLib License;
 either version 1.0, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 QuantLib License for more details.

 You should have received a copy of the QuantLib License along with this
 program; if not, please email quantlib-dev@lists.sf.net

 The QuantLib License is also available at <http://quantlib.org/license.shtml>
 The members of the QuantLib Group are listed in the QuantLib License
*/

/*! \page build_git_swig_windows Build - Compiling reposit On Windows From A git Clone

<div align="center"><small><a href="build_overview.html">back to installation index</a></small></div>

\section build_git_swig_windows_sec_1 Overview

This document explains how to build the reposit C++ and Excel binaries on Windows.

\section build_git_swig_windows_sec_2 Compiler

The only supported compiler is Visual Studio 2008, also known as VC9.  The only supported configuration is Release, 32 bit.

\section build_git_swig_windows_sec_3 Build Directory

Create a directory on your hard drive where you will do the build.  This document refers to your build directory as $REPOSIT_DIR but you do not need an environment variable by that name.

\section build_git_swig_windows_sec_4 Boost

Build Boost and configure VC9 to find it.

\section build_git_swig_windows_sec_5 PCRE

Download pcre-8.35.zip to $REPOSIT_DIR and uncompress:

\verbatim
$REPOSIT_DIR\pcre-8.35
\endverbatim

You need cmake in order to build the PCRE project files.  Create a new directory:

\verbatim
$REPOSIT_DIR\pcre-8.35\build
\endverbatim

And open a DOS prompt in that directory and do:

\verbatim
"C:\Program Files (x86)\CMake\bin\cmake.exe" $REPOSIT_DIR\pcre-8.35
\endverbatim

Build the solution:

\verbatim
$REPOSIT_DIR\pcre-8.35\build\PCRE.sln
\endverbatim

\section build_git_swig_windows_sec_6 SWIG

Open a git bash prompt in $REPOSIT_DIR and clone the repo:

\verbatim
git clone https://github.com/eehlers/swig.git
\endverbatim

Build the solution:

\verbatim
$REPOSIT_DIR\swig\swig_vc9.sln
\endverbatim

\section build_git_swig_windows_sec_7 reposit

Open a git bash prompt in $REPOSIT_DIR and clone the repo:

\verbatim
git clone https://github.com/eehlers/quantlib.git
\endverbatim

Build the solution:

\verbatim
$REPOSIT_DIR\quantlib\reposit\reposit_vc9.sln
\endverbatim

<br>
<table border="1" bgcolor="lightsteelblue">
<tr>
<td><b>NB:</b> Each of the remaining builds is optional.  If you are only interested in building QuantLibXL, you can
<a href=#build_git_swig_windows_sec_11>skip ahead to that section</a>.
</td>
</tr>
</table>

\section build_git_swig_windows_sec_8 Example - SimpleLib

Build the solution:

\verbatim
$REPOSIT_DIR\swig\Examples\reposit\simple\simple.sln
\endverbatim

Run the executable:

\verbatim
$REPOSIT_DIR\swig\Examples\reposit\simple\Release\MainSimpleLibAddin.exe
\endverbatim

Start Excel and load the addin and workbook:

\verbatim
$REPOSIT_DIR\swig\Examples\reposit\simple\Release\AddinXl.xll
$REPOSIT_DIR\swig\Examples\reposit\simple\AddinXl\AddinXl.xlsx
\endverbatim

\section build_git_swig_windows_sec_9 Example - ComplexLib

Build the solution:

\verbatim
$REPOSIT_DIR\swig\Examples\reposit\complex\complex.sln
\endverbatim

Run the executable:

\verbatim
$REPOSIT_DIR\swig\Examples\reposit\complex\Release\MainComplexLibAddin.exe
\endverbatim

Start Excel and load the addin and workbook:

\verbatim
$REPOSIT_DIR\swig\Examples\reposit\complex\Release\AddinXl.xll
$REPOSIT_DIR\swig\Examples\reposit\complex\ComplexLibXL\Workbooks\AddinXl.xlsx
\endverbatim

\section build_git_swig_windows_sec_10 QuantLibAddin

Build the solution:

\verbatim
$REPOSIT_DIR\quantlib\QuantLibAddin2\QuantLibAddin_vc9.sln
\endverbatim

Run the executable:

\verbatim
$REPOSIT_DIR\quantlib\QuantLibAddin2\Release\MainQuantLibAddin.exe
\endverbatim

\section build_git_swig_windows_sec_11 QuantLibXL

Build the solution:

\verbatim
$REPOSIT_DIR\quantlib\QuantLibXL2\QuantLibXL_full_vc9.sln
\endverbatim

Start Excel and load the addin and workbook:

\verbatim
$REPOSIT_DIR\quantlib\QuantLibXL2\xll\QuantLibXL-vc90-mt-1_7_0.xll
$REPOSIT_DIR\quantlib\QuantLibXL2\Workbooks\EquityOption.xlsx
\endverbatim

The Excel VBA Framework is working:

\verbatim
$REPOSIT_DIR\quantlib\QuantLibXL2\session_file.EUR-s-static.bat
$REPOSIT_DIR\quantlib\QuantLibXL2\Data2\XLS\EUR\EURSwap.xlsx
\endverbatim

\section build_git_swig_windows_sec_12 Adding new functions to the addin

Here is an example of how to export additional QuantLib functions to
QuantLibXL.  We are going to copy the definition of function
InterestRateIndex::name() out of the QuantLib header file into the SWIG
interface file.

Edit this file:

\verbatim
$REPOSIT_DIR\quantlib\QuantLib\ql\indexes\interestrateindex.hpp
\endverbatim

From class InterestRateIndex, copy this line:

\verbatim
std::string name() const;
\endverbatim

And paste it into this file, into the public section of the declaration of class InterestRateIndex:

\verbatim
$REPOSIT_DIR\quantlib\QuantLibAddin2\swig\functions\indexes.i
\endverbatim

Rebuild the project.  You should find that function qlInterestRateIndexName()
is now available in the Excel addin.

*/

